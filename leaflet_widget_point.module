<?php

/**
 * Implements hook_field_widget_info().
 */
function leaflet_widget_point_field_widget_info() {
  $widgets = array();

  $base_layers = leaflet_widget_point_base_layers();
  $urls = array_keys($base_layers);

  $widgets['leaflet_widget_point_widget'] = array(
    'label' => 'Leaflet.widget_point',
    'description' => 'Provides a map powered by Leaflet and Leaflet.widget_point.',
    'field types' => array('geofield'),
    'settings' => array(
      'map' => array(
        'base_url' => array_shift($urls),
        'center' => array(
          'lat' => 0.0,
          'lng' => 0.0
        ),
        'auto_center' => TRUE,
        'zoom' => 10,
      ),
    ),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function leaflet_widget_point_field_widget_settings_form($field, $instance) {
  $form = array();
  $settings = $instance['widget']['settings'];

  switch ($instance['widget']['type']) {
    case 'leaflet_widget_point_widget':
      $form['map'] = array(
        '#type' => 'fieldset',
        '#title' => 'Default map settings',
      );
      $form['map']['base_url'] = array(
        '#type' => 'select',
        '#title' => 'Leaflet.draw widget settings',
        '#default_value' => $settings['map']['base_url'],
        '#options' => leaflet_widget_point_base_layers(),
      );
      $form['map']['center'] = array('#type' => 'fieldset', '#collapsed' => TRUE, '#collapsible' => TRUE, '#title' => 'Default map center');
      $form['map']['center']['lat'] = array(
        '#type' => 'textfield', // 'hidden',
        '#title' => 'Latitude',
        '#default_value' => $settings['map']['center']['lat'],
        '#required' => TRUE,
      );
      $form['map']['center']['lng'] = array(
        '#type' => 'textfield', // 'hidden',
        '#title' => 'Longtitude',
        '#default_value' => $settings['map']['center']['lng'],
        '#required' => TRUE,
      );
      $form['map']['auto_center'] = array(
        '#type' => 'checkbox',
        '#title' => 'Automatically center map on existing features',
        '#description' => "This option overrides the widget's default center.",
        '#default_value' => $settings['map']['auto_center'],
      );
      $form['map']['zoom'] = array(
        '#type' => 'textfield', // 'hidden',
        '#title' => 'Default zoom level',
        '#default_value' => $settings['map']['zoom'],
        '#required' => TRUE,
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function leaflet_widget_point_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

    $instance['widget']['settings']['map']['scrollWheelZoom'] = FALSE;

    $settings = $instance['widget']['settings'];
  //$widget = geofield_get_base_element($element, $items, $delta);
  // this function is gone in geofield 2.0 so reproducing what it returned here

  // @TODO: Change this to be generic, so that we don't have poor DX to input as WKT.
  $element['wkt'] = array(
    '#type' => 'hidden',
    '#attributes' => array('class' => array('geofield_wkt')),
    '#default_value' => isset($items[$delta]['wkt']) ? $items[$delta]['wkt'] : NULL,
  );
  $element['input_format'] = array(
    '#type' => 'value',
    '#attributes' => array('class' => array('geofield_input_format')),
    '#value' => 'wkt',
  );
  $element['geo_type'] = array(
    '#type' => 'hidden',
    '#attributes' => array('class' => array('geofield_geo_type')),
    '#default_value' => isset($items[$delta]['geo_type']) ? $items[$delta]['geo_type'] : NULL,
  );
  $element['lat'] = array(
    '#type' => 'hidden',
    '#attributes' => array('class' => array('geofield_lat')),
    '#default_value' => isset($items[$delta]['lat']) ? $items[$delta]['lat'] : NULL,
  );
  $element['lon'] = array(
    '#type' => 'hidden',
    '#attributes' => array('class' => array('geofield_lon')),
    '#default_value' => isset($items[$delta]['lon']) ? $items[$delta]['lon'] : NULL,
  );
  $element['left'] = array(
    '#type' => 'hidden',
    '#attributes' => array('class' => array('geofield_left')),
    '#default_value' => isset($items[$delta]['left']) ? $items[$delta]['left'] : NULL,
  );
  $element['right'] = array(
    '#type' => 'hidden',
    '#attributes' => array('class' => array('geofield_right')),
    '#default_value' => isset($items[$delta]['right']) ? $items[$delta]['right'] : NULL,
  );
  $element['bottom'] = array(
    '#type' => 'hidden',
    '#attributes' => array('class' => array('geofield_bottom')),
    '#default_value' => isset($items[$delta]['bottom']) ? $items[$delta]['bottom'] : NULL,
  );
  $element['top'] = array(
    '#type' => 'hidden',
    '#attributes' => array('class' => array('geofield_top')),
    '#default_value' => isset($items[$delta]['top']) ? $items[$delta]['top'] : NULL,
  );

  $element['description'] = array(
    '#markup' => (!empty($element['#description'])) ? '<div class="description">' . $element['#description'] . '</div>' : '',
  );

  // Master column is used by element-validate to decide which set of columns it should use to compute all other values.
  // By default, wkt is the master-column, all we compute all other values from it. For other widget (such as lat/lon) this will be different
  $element['master_column'] = array(
    '#type' => 'hidden',
    '#value' => 'wkt',
  );

  // This validate function computes all other columns from the master field
  $element['#element_validate'] = array('geofield_element_validate');

  /* END FUNCTION geofield_get_base_element from geofield 1.0 */

  $widget = $element;

  $widget['#type'] = 'fieldset';
  switch ($instance['widget']['type']) {
    case 'leaflet_widget_point_widget':
      $id = 'leaflet-widget_' . str_replace('_', '-', $instance['field_name']);
      $class = 'leaflet-widget';
      $style = 'height: 400px;';

      $settings['map']['widget_point'] = array();
      $settings['map']['widget_point']['attach'] = "$id-input";
      $settings['map']['widget_point']['multiple'] = FALSE;

      $settings['map']['widget_point']['autoCenter'] = $settings['map']['auto_center'];
      if ($field['cardinality'] != 1) {
        $settings['map']['widget_point']['multiple'] = TRUE;
        // Leaflet.widget treats multiple == true && !cardinality as 'unlimited'.
        $settings['map']['widget_point']['cardinality'] = $field['cardinality'] > 0 ? $field['cardinality'] : 0;
      }

      // Provide container markup for map form element.
      $container = "<div id=\"$id\" class=\"$class\" style=\"$style\"></div>";
      $widget['leaflet_widget_point'] = array('#markup' => $container);

      // Overriding Geofield's validation handler.
      $widget['#element_validate'] = array('leaflet_widget_point_widget_validate');

      // Tell Geofield to expect GeoJSON instead of WKT.
      $widget['input_format']['#value'] = 'geojson';

      // Prepare existing field values to be rendered in widget.
      $collection = leaflet_widget_point_widget_prepare_items($items);
      $lat = "";
      $lng = "";
      if(isset($collection['features'][0]['geometry']->coordinates)){
        $lat = $collection['features'][0]['geometry']->coordinates[1];
        $lng = $collection['features'][0]['geometry']->coordinates[0];
      }
      // Set default value incase form is submitted without javascript enabled.
      $widget['wkt']['#default_value'] = drupal_json_encode($collection);

      $widget['wkt']['#attributes']['id'] = $settings['map']['widget_point']['attach'];

      //pass path to javascript for resources
      $path = drupal_get_path('module', 'leaflet_widget_point');
      // Include javascript.
      $widget['#attached']['library'][] = array('leaflet_widget_point', 'widget_point');
      $widget['#attached']['library'][] = array('leaflet_widget_point', 'leaflet_control_geocoder');
      // Settings and geo-data are passed to the widget keyed by field id.
      $widget['#attached']['js'][] = array(
        'type' => 'setting',
        'data' => array('leaflet_widget_point_widget' => array($id => $settings, "path" => $path, "lat" => $lat, "lng" => $lng)),
      );

      break;
  }

  return $widget;
}

function leaflet_widget_point_widget_prepare_items($items) {
  $features = array();
  foreach ($items as $item) {

    if (isset($item['geom'])) {
      $features[] = leaflet_widget_point_geojson_feature($item['geom']);
    }
  }
  return leaflet_widget_point_geojson_feature_collection($features);
}

function leaflet_widget_point_widget_validate($element, &$form_state) {
  $geophp = geophp_load();
  if (!$geophp) return FALSE;
  $geojson = json_decode($element['wkt']['#value']);
  $results = array();
  if ($geojson->type === 'FeatureCollection') {
    foreach ($geojson->features as $feature) {
      $results[] = array_merge($results, leaflet_widget_point_process_geojson($feature));
    }
  }
  else {
    $results = array(leaflet_widget_point_process_geojson($geojson));
  }
  form_set_value($element, $results, $form_state);
}

function leaflet_widget_point_process_geojson($geojson) {
  $geom = geoPHP::load($geojson, 'json');
  $type = $geom->geometryType();
  $result = array(
    'geom' => $geom->out('wkt'),
    'input_format' => 'wkt',
  );
  return geofield_compute_values($result);
}

/**
 * Implements hook_library().
 */
function leaflet_widget_point_library() {
  $path = drupal_get_path('module', 'leaflet_widget_point');
  libraries_load('leaflet');
  $libraries = array();

  $libraries['widget_point'] = array(
    'title' => 'Widget Point behavior',
    'version' => '1.x+8',
    'js' => array(
      "$path/js/widget_point.js" => array(),
    )
  );

  $lcg = libraries_get_path('leaflet-control-geocoder');
  $libraries['leaflet_control_geocoder'] = array(
    'title' => 'Leaflet Control Geocoder',
    'version' => '1.3.1+1',
    'css' => array(
      "$lcg/Control.Geocoder.css" => array(),
    ),
    'js' => array(
      "$lcg/Control.Geocoder.js" => array(),
    ),
  );

  return $libraries;
}

function leaflet_widget_point_geojson_feature_collection($features, $properties = array()) {
  if (!is_array($features)) {
    $features = array($features);
  }

  return array(
    'type' => 'FeatureCollection',
    'features' => $features,
  );
}

function leaflet_widget_point_geojson_feature($wkt, $properties = array()) {
  $geophp = geophp_load();
  if (!$geophp) return FALSE;

  $geometry = geoPHP::load($wkt, 'wkt');
  return array(
    'type' => 'Feature',
    'geometry' => json_decode($geometry->out('json')),
    'properties' => $properties,
  );
}

/**
 * Implements hook_leaflet_widget_point_base_layers().
 */
function leaflet_widget_point_leaflet_widget_pont_base_layers() {
  return array(
    'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' => 'OSM Mapnik',
  );
}

function leaflet_widget_point_base_layers() {
  $options = array();

  if (module_exists('leaflet')) {
    foreach (leaflet_map_get_info() as $id => $map) {
      foreach ($map['layers'] as $layer_id => $layer) {
        $options[$layer['urlTemplate']] = "$id - $layer_id";
      }
    }
  }

  return array_merge($options, module_invoke_all('leaflet_widget_point_base_layers'));
}
